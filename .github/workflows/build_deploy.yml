name: Provision infrastructure and build/deploy MyCinema application

on:

  # Allows manual workflow execution.
  workflow_dispatch:

  # Auto workflow execution after pushing to main.
  push:
    branches:
      - main

jobs:

  # Provisions AWS infrastructure for further deployments.
  provision-infrastructure:
    name: Provision infrastructure
    runs-on: ubuntu-latest
    steps:

      # Checks out application repository.
      - name: Checkout repository
        uses: actions/checkout@v3

      # Configures AWS credentials.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Checks if AWS stack already exists.
      - name: Check if AWS stack already exists
        id: stack_status
        run: |
          STACK_NAME=mycinema-infrastructure
          STACK_STATUS=$(aws cloudformation describe-stacks \
          --stack-name $STACK_NAME \
          --query "Stacks[0].StackStatus" \
          --output text || echo "NOT_FOUND")
          echo "STACK_STATUS=$STACK_STATUS" >> $GITHUB_ENV

      # If AWS stack is in rollback state, then deletes it.
      - name: Delete AWS stack if it is in rollback state
        if: env.STACK_STATUS == 'ROLLBACK_COMPLETE' || env.STACK_STATUS == 'ROLLBACK_FAILED'
        run: |
          aws cloudformation delete-stack --stack-name mycinema-infrastructure
          aws cloudformation wait stack-delete-complete --stack-name mycinema-infrastructure

      # Provisions AWS stack using IaC cloudformation descriptor.
      - name: Provision AWS stack
        run: |
          aws cloudformation deploy \
            --stack-name mycinema-infrastructure \
            --template-file infrastructure/cloudformation.yml \
            --capabilities CAPABILITY_NAMED_IAM \
            --debug \
            --parameter-overrides \
              BackendBucketName=${{ secrets.BACKEND_BUCKET_NAME }} \
              FrontendBucketName=${{ secrets.FRONTEND_BUCKET_NAME }} \
              JwtSignKeyLocation=${{ secrets.JWT_SIGN_KEY_LOCATION }} \
              AdminEmail=${{ secrets.ADMIN_EMAIL }} \
              AdminPassword=${{ secrets.ADMIN_PASSWORD }} \
              DbHost=${{ secrets.DB_HOST }} \
              DbPort=${{ secrets.DB_PORT }} \
              DbName=${{ secrets.DB_NAME }} \
              DbUser=${{ secrets.DB_USER }} \
              DbPassword=${{ secrets.DB_PASSWORD }} \
              TmdbApiKey=${{ secrets.TMDB_API_KEY }} \
              OpenAiApiKey=${{ secrets.OPENAI_API_KEY }}

      # Shows AWS stack set up process events on failure.
      - name: Show AWS stack set up process events on failure
        if: failure()
        run: |
          aws cloudformation describe-stack-events --stack-name mycinema-infrastructure

  # Builds and deploys MyCinema's backend.
  build-and-deploy-backend:
    name: Build and deploy backend
    runs-on: ubuntu-latest
    needs: provision-infrastructure

    steps:
      # Checks out application repository.
      - name: Checkout repository
        uses: actions/checkout@v3

      # Configures AWS credentials.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Sets up JDK 21.
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '21'

      # Caches Maven packages.
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      # Creates privateKey.pem file.
      - name: Create privateKey.pem file
        run: echo "${{ secrets.JWT_SIGN_KEY }}" > backend/src/main/resources/META-INF/resources/privateKey.pem

      # Runs the application's unit tests.
      - name: Run unit tests
        run: |
          cd backend
          mvn clean test

      # Builds the application.
      - name: Build
        run: |
          cd backend
          mvn clean install -Dquarkus.package.type=uber-jar -DskipTests

      # Uploads artifact to S3.
      - name: Upload artifact to S3
        run: |
          cd backend/target
          aws s3 cp mycinema-1.0.0-SNAPSHOT-runner.jar s3://${{ secrets.BACKEND_BUCKET_NAME }}/backend.jar

      # Generates a dynamic version label.
      - name: Generate dynamic version label
        run: echo "VERSION_LABEL=mycinema-backend-$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

      # Creates a new EB backend environment application version.
      - name: Create EB backend environment application version
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name MyCinema \
            --version-label "${{ env.VERSION_LABEL }}" \
            --source-bundle S3Bucket=${{ secrets.BACKEND_BUCKET_NAME }},S3Key=backend.jar

      # Updates EB backend environment with new application version.
      - name: Update EB backend environment
        run: |
          aws elasticbeanstalk update-environment \
            --application-name MyCinema \
            --environment-name MyCinemaBackend \
            --version-label "${{ env.VERSION_LABEL }}"

      # Shows EB backend environment information.
      - name: Show EB backend environment information
        run: |
          aws elasticbeanstalk describe-environments --application-name MyCinema --environment-names MyCinemaBackend

  # Builds and deploys MyCinema's frontend.
  frontend:
    name: Build and deploy frontend
    runs-on: ubuntu-latest
    needs: provision-infrastructure

    steps:
      # Checks out application repository.
      - name: Checkout repository
        uses: actions/checkout@v3

      # Configures AWS credentials.
      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set aws_session_token ${{ secrets.AWS_SESSION_TOKEN }}
          aws configure set region ${{ secrets.AWS_REGION }}

      # Gets backend URL.
      - name: Get backend URL
        run: |
          backend_url=$(aws cloudformation describe-stacks --stack-name mycinema-infrastructure --query "Stacks[0].Outputs[?OutputKey=='BackendURL'].OutputValue" --output text)
          echo "BACKEND_URL=$backend_url" >> $GITHUB_ENV
          echo $BACKEND_URL

      # Sets up Node.js.
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '23.1.0'

      # Installs dependencies.
      - name: Install dependencies
        run: |
          cd frontend
          npm install

      # Replaces VUE_APP_API_URL value by backend URL.
      - name: Replaces VUE_APP_API_URL value by backend URL
        run: |
          cd frontend
          echo "VUE_APP_API_URL=$BACKEND_URL" > .env

      # Builds the application.
      - name: Build
        run: |
          cd frontend
          npm run build

      # Uploads build artifact to S3.
      - name: Upload build artifact to S3
        run: aws s3 cp frontend/dist/ s3://${{ secrets.FRONTEND_BUCKET_NAME }}/ --recursive --acl public-read
