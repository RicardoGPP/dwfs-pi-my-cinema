name: Build and Deploy MyCinema

on:

  workflow_dispatch:
  push:
    branches:
      - main

jobs:

  infrastructure:
    name: Set Up Infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up AWS CloudFormation Stack
        run: |
          aws cloudformation deploy \
            --stack-name mycinema-infrastructure \
            --template-file infrastructure/cloudformation.yml \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              S3BucketName=${{ secrets.AWS_S3_BUCKET }} \
              ECRRepositoryName=${{ secrets.AWS_ECR_REPOSITORY }} \
              DbUser=${{ secrets.DB_USER }} \
              DbPassword=${{ secrets.DB_PASSWORD }} \
              DbName=${{ secrets.DB_NAME }}

      - name: Obtain DB Host
        id: get-db-host
        run: |
          DB_HOST=$(aws rds describe-db-instances \
            --query "DBInstances[?DBName=='${{ secrets.DbName }}'].Endpoint.Address" \
            --output text \
            --region ${{ secrets.AWS_REGION }})
          echo "DB_HOST=$DB_HOST" >> $GITHUB_ENV

      - name: Describe CloudFormation Stack Events (on failure)
        if: failure()
        run: |
          aws cloudformation describe-stack-events --stack-name mycinema-infrastructure

  backend:
    name: Build and Deploy Backend
    runs-on: ubuntu-latest
    needs: infrastructure

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '21'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean install --file backend/pom.xml -DskipTests

      - name: Create privateKey.pem file
        run: |
          mkdir -p backend/src/main/resources/META-INF/resources
          echo "${{ secrets.JWT_SIGN_KEY }}" > backend/src/main/resources/META-INF/resources/privateKey.pem

      - name: Build Docker image with Quarkus
        run: |
          IMAGE="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPOSITORY }}:latest"
          mvn package -Dquarkus.container-image.build=true \
            -Dquarkus.container-image.image=$IMAGE \
            -f backend/pom.xml \
            -DskipTests

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set aws_session_token ${{ secrets.AWS_SESSION_TOKEN }}
          aws configure set region ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Push Docker image to ECR
        run: |
          IMAGE="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPOSITORY }}:latest"
          docker push $IMAGE

  frontend:
    name: Build and Deploy Frontend
    runs-on: ubuntu-latest
    needs: backend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '23.1.0'

      - name: Install dependencies
        run: |
          cd frontend
          npm install

      - name: Set API URL environment variable
        run: |
          echo "VUE_APP_API_URL=http://${{ env.BACKEND_API_URL }}" > frontend/.env

      - name: Run build
        run: |
          cd frontend
          npm run build

      - name: Deploy to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
