name: Provision infrastructure and build/deploy MyCinema application

on:

  # Allows manual workflow execution.
  workflow_dispatch:

  # Auto workflow execution after pushing to main.
  push:
    branches:
      - main

jobs:

  # Provisions AWS infrastructure for further deployments.
  provision-infrastructure:
    name: Prepare infrastructure
    runs-on: ubuntu-latest
    steps:

      # Checks out application repository.
      - name: Checkout repository
        uses: actions/checkout@v3

      # Configures AWS credentials.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Checks if AWS stack already exists.
      - name: Check if AWS stack already exists
        id: stack_status
        run: |
          STACK_NAME=mycinema-infrastructure
          STACK_STATUS=$(aws cloudformation describe-stacks \
          --stack-name $STACK_NAME \
          --query "Stacks[0].StackStatus" \
          --output text || echo "NOT_FOUND")
          echo "STACK_STATUS=$STACK_STATUS" >> $GITHUB_ENV

      # If AWS stack is in rollback state, then deletes it.
      - name: Delete AWS stack if it is in rollback state
        if: env.STACK_STATUS == 'ROLLBACK_COMPLETE' || env.STACK_STATUS == 'ROLLBACK_FAILED'
        run: |
          aws cloudformation delete-stack --stack-name mycinema-infrastructure
          aws cloudformation wait stack-delete-complete --stack-name mycinema-infrastructure

      # Provisions AWS stack using IaC cloudformation descriptor.
      - name: Provision AWS stack
        run: |
          aws cloudformation deploy \
            --stack-name mycinema-infrastructure \
            --template-file infrastructure/cloudformation.yml \
            --capabilities CAPABILITY_NAMED_IAM \
            --debug \
            --parameter-overrides \
              S3BucketName=${{ secrets.AWS_S3_BUCKET }} \
              DbUser=${{ secrets.DB_USER }} \
              DbPassword=${{ secrets.DB_PASSWORD }} \
              DbName=${{ secrets.DB_NAME }}

      # Shows AWS stack set up process events on failure.
      - name: Show AWS stack set up process events on failure
        if: failure()
        run: |
          aws cloudformation describe-stack-events --stack-name mycinema-infrastructure

      # Gets the RDS database host when stack is ready and sets as an environment variable.
      - name: Get RDS database host
        run: |
          DB_HOST=$(aws rds describe-db-instances \
            --query "DBInstances[?DBName=='${{ secrets.DbName }}'].Endpoint.Address" \
            --output text \
            --region ${{ secrets.AWS_REGION }})
          echo "DB_HOST=$DB_HOST" >> $GITHUB_ENV

  # Builds and deploys MyCinema's backend.
  build-and-deploy-backend:
    name: Build and Deploy Backend
    runs-on: ubuntu-latest
    needs: provision-infrastructure

    steps:
      # Checks out application repository.
      - name: Checkout repository
        uses: actions/checkout@v3

      # Configures AWS credentials.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Sets up JDK 21.
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '21'

      # Caches Maven packages.
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      # Builds application.
      - name: Build
        run: mvn clean install --file backend/pom.xml -DskipTests

      # Uploads build artifact (JAR) to S3.
      - name: Upload JAR to S3
        run: |
          aws s3 cp backend/target/backend.jar s3://${{ secrets.AWS_S3_BUCKET }}/backend.jar

      # Updates EB backend environment with new application version.
      - name: Update EB backend environment
        run: |
          aws elasticbeanstalk update-environment \
            --application-name MyCinema \
            --environment-name MyCinemaBackend \
            --version-label "$(date +'%Y%m%d%H%M%S')"

      # Shows EB backend environment information.
      - name: Show EB backend environment information
        run: |
          aws elasticbeanstalk describe-environments --application-name MyCinema --environment-names MyCinemaBackend

  # backend:
  #   name: Build and Deploy Backend
  #   runs-on: ubuntu-latest
  #   needs: infrastructure

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Set up JDK 21
  #       uses: actions/setup-java@v3
  #       with:
  #         distribution: 'adopt'
  #         java-version: '21'

  #     - name: Cache Maven packages
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.m2
  #         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
  #         restore-keys: ${{ runner.os }}-maven-

  #     - name: Build with Maven
  #       run: mvn clean install --file backend/pom.xml -DskipTests

  #     - name: Create privateKey.pem file
  #       run: |
  #         mkdir -p backend/src/main/resources/META-INF/resources
  #         echo "${{ secrets.JWT_SIGN_KEY }}" > backend/src/main/resources/META-INF/resources/privateKey.pem

  #     - name: Build Docker image with Quarkus
  #       run: |
  #         IMAGE="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPOSITORY }}:latest"
  #         mvn package -Dquarkus.container-image.build=true \
  #           -Dquarkus.container-image.image=$IMAGE \
  #           -f backend/pom.xml \
  #           -DskipTests

  #     - name: Configure AWS CLI
  #       run: |
  #         aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws configure set aws_session_token ${{ secrets.AWS_SESSION_TOKEN }}
  #         aws configure set region ${{ secrets.AWS_REGION }}

  #     - name: Log in to Amazon ECR
  #       run: |
  #         aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

  #     - name: Push Docker image to ECR
  #       run: |
  #         IMAGE="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPOSITORY }}:latest"
  #         docker push $IMAGE

  # frontend:
  #   name: Build and Deploy Frontend
  #   runs-on: ubuntu-latest
  #   needs: infrastructure

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '23.1.0'

  #     - name: Install dependencies
  #       run: |
  #         cd frontend
  #         npm install

  #     - name: Set API URL environment variable
  #       run: |
  #         echo "VUE_APP_API_URL=http://${{ env.BACKEND_API_URL }}" > frontend/.env

  #     - name: Run build
  #       run: |
  #         cd frontend
  #         npm run build

  #     - name: Configure AWS CLI
  #       run: |
  #         aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws configure set aws_session_token ${{ secrets.AWS_SESSION_TOKEN }}
  #         aws configure set region ${{ secrets.AWS_REGION }}

  #     - name: Deploy to S3
  #       uses: jakejarvis/s3-sync-action@master
  #       with:
  #         args: --acl public-read --follow-symlinks --delete
  #       env:
  #         AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         AWS_REGION: ${{ secrets.AWS_REGION }}
